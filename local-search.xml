<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>在Windows Server 2022上安装Android模拟器</title>
    <link href="/2024/03/01/winserver-android-hyperv/"/>
    <url>/2024/03/01/winserver-android-hyperv/</url>
    
    <content type="html"><![CDATA[<p>由于需要在Windows Server 2022上挂一些游戏（我们粥批是这样的），需要安装一个Android模拟器。由于Hyper-V的存在，市面上主流的模拟器都会报错，有报缺少VT-D的，有直接说无法启动的，也有让我关闭Hyper-V的。但是我又需要Hyper-V来跑一些虚拟机，所以不能关闭。</p><p>其实在Windows10上，hyper-v和模拟器是可以共存的，需要去功能中添加一个叫做“Windows Hypervisor Platform(Windows虚拟机监控程序平台)”的功能，就可以让安卓模拟器、以及VMware等虚拟机软件和Hyper-V共存。但是在Windows Server 2022上，在功能中找不到这个功能，需要使用PowerShell来安装。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs powershell">Dism /online /<span class="hljs-built_in">Enable-Feature</span> /FeatureName:HypervisorPlatform /All <span class="hljs-comment"># 安装Windows Hypervisor Platform</span><br><span class="hljs-comment"># 同时安装VirtualMachinePlatform与WSL 一次性重启解决</span><br>Dism /online /<span class="hljs-built_in">Enable-Feature</span> /FeatureName:VirtualMachinePlatform /All<br>Dism /online /<span class="hljs-built_in">Enable-Feature</span> /FeatureName:Microsoft<span class="hljs-literal">-Windows-Subsystem-Linux</span> /All<br></code></pre></td></tr></table></figure><p>随后重启，就可以在Windows Server 2022上安装Android模拟器了。我选择了传说中最流畅的<a href="https://mumu.163.com/">MuMu模拟器</a>，下载后一路下一步安装即可，过程中并没有报错，问题解决。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Windows</tag>
      
      <tag>Android</tag>
      
      <tag>Hyper-V</tag>
      
      <tag>明日方舟</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>排查Mellanox ConnectX-3 Pro 在Windows下无法启动RDMA的问题</title>
    <link href="/2024/02/29/mellanox-win-rocev2/"/>
    <url>/2024/02/29/mellanox-win-rocev2/</url>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>最近在安装了Mellanox ConnectX-3 Pro的网卡，想要使用RDMA来加速网络传输，但是在安装好驱动后，发现SMB无法启动RDMA。在网上找了一圈，也没有找到解决方案，最后自己摸索了一下，终于解决了这个问题，就此记录一下。</p><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>为了最简单地启用RDMA，我两端都使用了Windows系统，客户端是Windows 10 22H2，服务端是Windows Server 2022。两端都使用了Mellanox ConnectX-3 Pro 40G网卡。通过软路由连接，题外话，软路由的软交换是能够支持RDMA的，这里我使用的软路由系统是iKuai。两端配置如下：</p><p>客户端：</p><ul><li>Windows 10 22H2</li><li>Ryzen 9 7950X</li><li>Mellanox ConnectX-3 Pro 40G网卡</li></ul><p>服务端：</p><ul><li>Windows Server 2022</li><li>Xeon E5-2640 v4</li><li>Mellanox ConnectX-3 Pro 40G网卡</li></ul><h2 id="排查"><a href="#排查" class="headerlink" title="排查"></a>排查</h2><p>首先，我们需要确认网卡的驱动是否安装正确。在设备管理器中，我们可以看到Mellanox ConnectX-3 Pro网卡的驱动已经安装成功。通过<code>Get-NetAdapter</code>命令，我们可以看到网卡的详细信息，包括网卡的名字、状态、MAC地址等。通过<code>Get-NetAdapterRDMA</code>命令，我们可以看到网卡是否支持RDMA，以及RDMA是否已经启用。在我的环境中，服务端的RDMA是已经启用的，但是客户端的RDMA是没有启用的，所以需要排查客户端的问题。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">PS</span> C:\&gt;<span class="hljs-built_in">Get-NetAdapterRDMA</span><br>Name                      InterfaceDescription                     Enabled     PFC        ETS       <br><span class="hljs-literal">----</span>                      <span class="hljs-literal">--------------------</span>                     <span class="hljs-literal">-------</span>     <span class="hljs-literal">---</span>        <span class="hljs-literal">---</span><br>以太网 <span class="hljs-number">13</span>                 HP InfiniBand FDR/Ethernet <span class="hljs-number">10</span>Gb/<span class="hljs-number">40</span>Gb ...  False        False      False<br>以太网 <span class="hljs-number">14</span>                 HP InfiniBand FDR/Ethernet <span class="hljs-number">10</span>Gb/<span class="hljs-number">40</span>Gb ...  False        False      False<br><span class="hljs-built_in">PS</span> C:\&gt;<br><span class="hljs-built_in">PS</span> C:\&gt;<span class="hljs-built_in">Get-SmbServerNetworkInterface</span><br>Interface Index RSS Capable RDMA Capable Speed    IpAddresses<br><span class="hljs-literal">---------------</span> <span class="hljs-literal">-----------</span> <span class="hljs-literal">------------</span> <span class="hljs-literal">-----</span>    <span class="hljs-literal">-----------</span><br><span class="hljs-number">12</span>              True        False         <span class="hljs-number">40</span> Gbps  &#123;...&#125;<br>...<br></code></pre></td></tr></table></figure><p>通过<code>Get-MlnxDriverCoreSetting</code>命令，可以查看ConnectX-3 Pro网卡的驱动设置，包括RoCE版本、网卡的状态等。我们需要使用RoCEv2，所以需要确认RoCEv2是否已经启用。在我的环境中，客户端的RoCEv2是没有启用的，找到问题所在了。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">PS</span> C:\&gt;<span class="hljs-built_in">Get-MlnxDriverCoreSetting</span><br><br>Caption               : DriverCoreSettingData <span class="hljs-string">&#x27;mlx4_bus&#x27;</span><br>Description           : Mellanox Driver Option Settings<br>ElementName           : mlx4_bus<br>InstanceID            : mlx4_bus<br>Name                  : mlx4_bus<br>Source                : <span class="hljs-number">3</span><br>SystemName            : DESKTOP<span class="hljs-literal">-ONVNK2T</span><br>LogMttsPerSeg         : <span class="hljs-number">0</span><br>LogNumCq              : <span class="hljs-number">19</span><br>LogNumMac             : <span class="hljs-number">7</span><br>LogNumMcg             : <span class="hljs-number">4294967295</span><br>LogNumMpt             : <span class="hljs-number">19</span><br>LogNumMtt             : <span class="hljs-number">20</span><br>LogNumQp              : <span class="hljs-number">20</span><br>LogNumRdmaRc          : <span class="hljs-number">4</span><br>LogNumSrq             : <span class="hljs-number">16</span><br>LogNumVlan            : <span class="hljs-number">7</span><br>MaximumWorkingThreads : <span class="hljs-number">4294967295</span><br>RoceMode              : <span class="hljs-number">0</span><br>Set4kMtu              : True<br>SriovPort1NumVFs      :<br>SriovPort2NumVFs      :<br>SriovPortMode         :<br>PSComputerName        :<br></code></pre></td></tr></table></figure><p>可以看到，RoceMode是0，说明RoCE是没有启用的，我们需要将RoCEv2启用。通过<code>Set-MlnxDriverCoreSetting</code>命令，我们可以修改RoCEv2的设置。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">PS</span> C:\&gt;<span class="hljs-built_in">Set-MlnxDriverCoreSetting</span> <span class="hljs-literal">-RoceMode</span> <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>修改成功后，我们需要重启网卡，使设置生效。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">PS</span> C:\&gt;<span class="hljs-built_in">Restart-NetAdapter</span> <span class="hljs-literal">-Name</span> <span class="hljs-string">&quot;以太网 13&quot;</span><br></code></pre></td></tr></table></figure><p>重启成功后，我们再次查看RDMA的状态，可以看到RDMA已经启用了。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">PS</span> C:\&gt;<span class="hljs-built_in">Get-NetAdapterRDMA</span><br>Name                      InterfaceDescription                     Enabled     PFC        ETS<br><span class="hljs-literal">----</span>                      <span class="hljs-literal">--------------------</span>                     <span class="hljs-literal">-------</span>     <span class="hljs-literal">---</span>        <span class="hljs-literal">---</span><br>以太网 <span class="hljs-number">13</span>                 HP InfiniBand FDR/Ethernet <span class="hljs-number">10</span>Gb/<span class="hljs-number">40</span>Gb ...  True        False      False<br>以太网 <span class="hljs-number">14</span>                 HP InfiniBand FDR/Ethernet <span class="hljs-number">10</span>Gb/<span class="hljs-number">40</span>Gb ...  True       False      False<br></code></pre></td></tr></table></figure><p>检查SMB的RDMA状态，可以看到客户端SMB的RDMA也已经启用了。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">PS</span> C:\&gt;<span class="hljs-built_in">Get-SmbClientNetworkInterface</span><br>Interface Index RSS Capable RDMA Capable Speed    IpAddresses<br><span class="hljs-literal">---------------</span> <span class="hljs-literal">-----------</span> <span class="hljs-literal">------------</span> <span class="hljs-literal">-----</span>    <span class="hljs-literal">-----------</span><br><span class="hljs-number">12</span>              True        True         <span class="hljs-number">40</span> Gbps  &#123;...&#125;<br>...<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Mellanox</tag>
      
      <tag>RDMA</tag>
      
      <tag>Windows</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>记录一次光猫崩溃</title>
    <link href="/2024/02/29/zte-modem-crash/"/>
    <url>/2024/02/29/zte-modem-crash/</url>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>2024年2月27日，上海电信对中兴光猫G7615进行推送升级，版本变为V2.0.0P2T3。笔者是自己购买的光猫，不是电信给的，所有参数都是自己设置的，无法通过电信自动下发。在自动更新后，疑似是电信自动下发的配置文件导致光猫崩溃，先是IPTV无法使用，在光猫重启后，无法上网。同时光猫的管理员密码被电信的TR069协议修改，通过Web页面只能登陆普通用户，没有管理员权限，无法配置参数。联系运维小哥，被告知只能换回SDN光猫，无法桥接，无法使用自己的路由器来拨号。遂折腾了一天，重新配置，终于恢复如初，就此记录一下折腾的过程。<br><img src="/images/zte-modem/autoupdate.png" alt="光猫被自动升级了"></p><h2 id="重置光猫"><a href="#重置光猫" class="headerlink" title="重置光猫"></a>重置光猫</h2><p class="note note-danger" style="font-weight: bold;  font-size: 18px;">先拔掉光纤！先拔掉光纤！先拔掉光纤！</p><!-- # **<span style="color:red;">先拔掉光纤！先拔掉光纤！先拔掉光纤！</span>** --><p>重要的事情说三遍！如果不拔掉光纤，光猫会自动通过电信的TR069协议改管理员密码。进不了光猫后台就什么都干不了！</p><ol><li>拔掉光纤，用卡针长按光猫背面的Reset键15-30秒，等待光猫的所有指示灯都亮起，然后松开Reset键。</li><li>用一根网线连接光猫和电脑，由于光猫重置后，DHCP服务不一定会开启，所以需要手动设置电脑的IP地址为<code>192.168.1.2</code>，使用浏览器访问<code>192.168.1.1</code>，输入用户名<code>telecomadmin</code>和密码<code>nE7jA%5m</code>，进入光猫的管理页面。</li><li>需要折腾的话，还需要打开光猫的telnet，但经过实测，V2.0.0P2T3版本的光猫已经无法通过开源工具解锁telnet，所以我们需要先降级光猫的固件。这里我使用的是恩山找到的<code>V2.0.0P1N15E</code>版本的相对较老的固件，原帖子在<a href="https://www.right.com.cn/forum/thread-8310054-1-2.html">这里</a>，在我的仓库也可以<a href="https://github.com/FrankGu0911/zte_modem_tools/blob/main/firmware/G7615_CT_V2.0.0P1N15E_20230812_UPGRADE_BOOTLDR_ALL.bin">下载</a>，保证可以解锁telnet。（降级一定要确定硬件版本，选择合适自己得版本降级）</li></ol><p class="note note-danger" style="font-weight: bold;  font-size: 18px;">!!注意，只适用于G7615电信原版，联通版等手动刷了电信分区的机器切勿尝试，会砖，会砖，会砖!!</p><ol start="4"><li>寻找一番发现，光猫的固件升级页面是隐藏的，需要在地址栏输入<code>http://192.168.1.1:8080/login.cgi?username=telecomadmin&amp;psd=nE7jA%255m&amp;hidden=upgrade</code>，然后点击管理-&gt;设备管理-&gt;软件版本升级，上传bin升级。</li><li>降级成功后，自动重启，重新登录管理页面，此时硬件版本显示：V1.3.0 软件版本：V2.0.0P1T1下面就开始开启telnet来折腾。</li></ol><h2 id="开启telnet"><a href="#开启telnet" class="headerlink" title="开启telnet"></a>开启telnet</h2><p>老版本的固件可以通过两款开源工具来解锁telnet：</p><ol><li>来自<a href="https://www.right.com.cn/forum/space-uid-273987.html">mayi5147</a>：<a href="https://github.com/douniwan5788/zte_modem_tools">https://github.com/douniwan5788/zte_modem_tools</a></li><li>来自<a href="https://www.right.com.cn/forum/space-uid-294565.html">thank243</a>：<a href="https://github.com/thank243/zteOnu">https://github.com/thank243/zteOnu</a></li></ol><p>这里我使用的是第一款工具，需要Python3环境，按照README的说明，先安装依赖：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">conda create -n zte python=3.8<br>conda activate zte<br>pip install -r requirements.txt<br></code></pre></td></tr></table></figure><p>我使用的是电信版固件，默认管理员用户名与密码是<code>telecomadmin</code>和<code>nE7jA%5m</code>，所以运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python3 zte_factroymode.py --user telecomadmin --pass nE7jA%5m --ip 192.168.1.1 --port 8080 telnet open<br></code></pre></td></tr></table></figure><p><img src="/images/zte-modem/zte-telnetopen.png" alt="使用开源工具解锁Telnet"></p><p>运行成功后，光猫的telnet就被打开了，同时会给一个telnet的用户名和密码，记得赶紧操作，十几分钟半个小时后，用户名和密码就会换。</p><p>Windows下可以使用putty连接telnet，或者在系统功能中安装Telnet，安装过程不再赘述。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">telnet 192.168.1.1<br></code></pre></td></tr></table></figure><p><img src="/images/zte-modem/telnet-con.png" alt="Telnet登陆"></p><h2 id="固化Telnet"><a href="#固化Telnet" class="headerlink" title="固化Telnet"></a>固化Telnet</h2><p>光猫重启后，telnet就会被关闭，所以我们需要固化telnet：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash">sendcmd 1 DB p TelnetCfg    <span class="hljs-comment">#查看telnet配置</span><br>sendcmd 1 DB <span class="hljs-built_in">set</span> TelnetCfg 0 Lan_Enable 1   <span class="hljs-comment">#开启lan口telnet</span><br>sendcmd 1 DB <span class="hljs-built_in">set</span> TelnetCfg 0 TS_UName root    <span class="hljs-comment">#设置telnet用户名</span><br>sendcmd 1 DB <span class="hljs-built_in">set</span> TelnetCfg 0 TSLan_UName root    <span class="hljs-comment">#设置lan口下telnet用户名</span><br>sendcmd 1 DB <span class="hljs-built_in">set</span> TelnetCfg 0 TS_UPwd Zte521   <span class="hljs-comment">#设置telnet密码</span><br>sendcmd 1 DB <span class="hljs-built_in">set</span> TelnetCfg 0 TSLan_UPwd Zte521   <span class="hljs-comment">#设置lan口下telnet密码</span><br>sendcmd 1 DB <span class="hljs-built_in">set</span> TelnetCfg 0 Max_Con_Num 99   <span class="hljs-comment">#设置最大连接数</span><br>sendcmd 1 DB <span class="hljs-built_in">set</span> TelnetCfg 0 ExitTime 999999    <span class="hljs-comment">#设置退出时间</span><br>sendcmd 1 DB <span class="hljs-built_in">set</span> TelnetCfg 0 InitSecLvl 3   <span class="hljs-comment">#设置初始安全级别</span><br>sendcmd 1 DB <span class="hljs-built_in">set</span> TelnetCfg 0 CloseServerTime 9999999    <span class="hljs-comment">#设置关闭telnet时间</span><br>sendcmd 1 DB <span class="hljs-built_in">set</span> TelnetCfg 0 Lan_EnableAfterOlt 1   <span class="hljs-comment">#设置olt下lan口telnet开关</span><br>sendcmd 1 DB save   <span class="hljs-comment">#保存配置</span><br></code></pre></td></tr></table></figure><h2 id="删除万恶的TR069"><a href="#删除万恶的TR069" class="headerlink" title="删除万恶的TR069"></a>删除万恶的TR069</h2><p>一旦光猫连上光纤，电信就会通过TR069协议修改光猫的管理员密码，所以我们需要删除TR069：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">sendcmd 1 DB p MgtServer   <span class="hljs-comment">#查看MgtServer配置</span><br>sendcmd 1 DB <span class="hljs-built_in">set</span> MgtServer 0 URL http://127.0.0.1   <span class="hljs-comment">#将TR069服务器地址改为本地</span><br>sendcmd 1 DB <span class="hljs-built_in">set</span> MgtServer 0 Tr069Enable 0  <span class="hljs-comment">#关闭TR069</span><br>sendcmd 1 DB save<br></code></pre></td></tr></table></figure><p>同时，如果不用电话，建议直接删除管理+语音连接</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">sendcmd 1 DB p WANC<br>sendcmd 1 DB delr WANC 0<br>sendcmd 1 DB save<br></code></pre></td></tr></table></figure><p>通过以上步骤，得到一个已注册但没有配置任何连接的光猫。再更改下管理员用户名和密码。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">sendcmd 1 DB <span class="hljs-built_in">set</span> DevAuthInfo 0 User XXXXXX  <span class="hljs-comment">#修改超级用户名</span><br>sendcmd 1 DB <span class="hljs-built_in">set</span> DevAuthInfo 0 Pass XXXXXX  <span class="hljs-comment">#修改超级密码</span><br>sendcmd 1 DB save<br></code></pre></td></tr></table></figure><h2 id="解决DNS劫持"><a href="#解决DNS劫持" class="headerlink" title="解决DNS劫持"></a>解决DNS劫持</h2><p>电信固件和联通固件部分省份没注册ITMS服务器的话会劫持所有DNS请求的结果到192.168.1.1，使用如下命令手动欺骗ITMS注册结果，解决刷完后打开任意网页自动跳转LOID注册页面。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">sendcmd 1 DB <span class="hljs-built_in">set</span> PDTCTUSERINFO 0 Status 0<br>sendcmd 1 DB <span class="hljs-built_in">set</span> PDTCTUSERINFO 0 Result 1<br>sendcmd 1 DB save<br></code></pre></td></tr></table></figure><p>重启光猫后，就可以使用新的管理员用户名和密码登录光猫的管理页面了。</p><h2 id="上海电信光猫配置"><a href="#上海电信光猫配置" class="headerlink" title="上海电信光猫配置"></a>上海电信光猫配置</h2><p>先去管理中填入Loid，笔者这里是需要桥接网络，并且IPTV仍然接在光猫上，配置网络：</p><p><img src="/images/zte-modem/network.png" alt="网络设置"></p><p>然后是IPTV：</p><p><img src="/images/zte-modem/iptv.png" alt="IPTV设置"><br><img src="/images/zte-modem/vlan-iptv.png" alt="IPTV的Vlan设置"><br><img src="/images/zte-modem/lan.png" alt="别动DNS来源"></p><p>看直播频道会卡住的话，需要配置一下组播IGMP：</p><p><img src="/images/zte-modem/igmp.png" alt="组播IGMP设置"></p><p>至此，光猫的配置就完成了，可以拔掉网线，接上光纤，连接路由器，就可以正常上网，看IPTV了。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>目前电信的光猫固件版本是V2.0.0P2T3，已经无法通过开源工具解锁telnet，所以只能通过降级固件来解锁telnet。还好没有堵上光猫固件降级的隐藏开关，不然可能要拆机用TTL刷机了。在此感谢恩山的大佬们，感谢开源工具的作者们，在此记录一下折腾的过程，以备后用（希望不会用到），希望对大家有所帮助。</p>]]></content>
    
    
    
    <tags>
      
      <tag>网络</tag>
      
      <tag>光猫</tag>
      
      <tag>电信</tag>
      
      <tag>TR069</tag>
      
      <tag>Telnet</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>记录一次Hexo的搭建与部署</title>
    <link href="/2024/02/28/Hexo-build/"/>
    <url>/2024/02/28/Hexo-build/</url>
    
    <content type="html"><![CDATA[<p>本教程使用GitHub自带的GitHub pages来生成静态个人博客，而Hexo可以更换各种好看的主题，而且都是免费的，花一点时间就可以打造出自己独有的个人博客。</p><p>Hexo这个有力的工具可以让我们专注于写出一篇博客而不需要关心如何编写html和CSS，再如何形成一个网站，它可以根据markdown文档和指定的主题直接生成一个静态网站，对于新手朋友或者不是专门搞前端开发的人们非常友好。</p><p>还有一个优点就是GitHub pages生成的网站很稳定，就算自己的本地站点被删除，也完全不影响已经发布到GitHub仓库的文章，依旧可以访问查看。</p><h2 id="部署环境"><a href="#部署环境" class="headerlink" title="部署环境"></a>部署环境</h2><h3 id="1-安装git和node-js"><a href="#1-安装git和node-js" class="headerlink" title="1. 安装git和node.js"></a>1. 安装git和node.js</h3><p>首先我们需要在本地安装git和node.js，因为Hexo基于node.js，再生成一个ssh密钥用于连接GitHub仓库以及本地文件夹。</p><ul><li>git下载链接：<a href="https://git-scm.com/">Git - Downloading Package</a></li><li>node.js下载链接：<a href="https://nodejs.org/">Node.js</a></li></ul><p>安装时可以直接一路点下一步，按默认设置安装即可。<br>想要验证安装是否成功，可以win+r输入cmd进入终端，并如下验证，如果出现版本号说明安装成功。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">git --version <span class="hljs-comment"># 查看git版本</span><br>node -v <span class="hljs-comment"># 查看node版本</span><br>npm -v <span class="hljs-comment"># 查看npm版本</span><br></code></pre></td></tr></table></figure><h3 id="2-连接GitHub"><a href="#2-连接GitHub" class="headerlink" title="2. 连接GitHub"></a>2. 连接GitHub</h3><p>在本地终端输入以下命令，设置用户名和邮箱：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config --global user.name <span class="hljs-string">&quot;GitHub用户名&quot;</span><br>git config --global user.email <span class="hljs-string">&quot;GitHub邮箱&quot;</span><br></code></pre></td></tr></table></figure><p>然后创建一个ssh密钥：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh-keygen -t rsa -C <span class="hljs-string">&quot;GitHub邮箱&quot;</span><br></code></pre></td></tr></table></figure><p>最后返回密钥结果和图片说明创建完成。</p><pre><code class="hljs">Enter passphrase (empty for no passphrase):Enter same passphrase again:Your identification has been saved in C:\xxx\xxx/.ssh/id_rsa.    Your public key has been saved in C:\xxx\xxx/.ssh/id_rsa.pub.    The key fingerprint is:SHA256:xxxThe key&#39;s randomart image is:+---[RSA 3072]----+|       +=+=+.++oo||       .oB  +.+=o||      . o .. +.oo||     o .    = oo.||      o S  + = =+||         +o + O o||          .+ + . ||          . . +  ||           . . .E|+----[SHA256]-----+</code></pre><p>找到路径Your public key has been saved in C:\xxx\xxx&#x2F;.ssh&#x2F;id_rsa.pub，打开id_rsa.pub文件，复制里面的内容。</p><p>登录GitHub，点击右上角自己的头像 - setting，找到SSH and GPG keys，点击New SSH key：<br><img src="/images/GitHub%E6%B7%BB%E5%8A%A0sshkey.png" alt="GitHub添加ssh key"><br>检测是否连接成功：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh git@github.com<br></code></pre></td></tr></table></figure><p>如果出现以下信息说明连接成功：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">Hi xxx! You<span class="hljs-string">&#x27;ve successfully authenticated,...</span><br></code></pre></td></tr></table></figure><h2 id="Hexo搭建"><a href="#Hexo搭建" class="headerlink" title="Hexo搭建"></a>Hexo搭建</h2><p>关于详细安装步骤，可查看Hexo官网：<a href="https://hexo.io/zh-cn/docs/">Hexo - A fast, simple &amp; powerful blog framework</a>，这里只是简单的记录一下。</p><p>使用 npm 安装 Hexo：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install -g hexo-cli<br></code></pre></td></tr></table></figure><p>输入hexo -v即可查看是否安装成功。</p><p>新建一个hexo站点根目录，在这个目录下执行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo init blog<br><span class="hljs-built_in">cd</span> blog<br>npm install<br></code></pre></td></tr></table></figure><p>完成后再执行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo g<br>hexo s<br></code></pre></td></tr></table></figure><p>访问<code>http://localhost:4000</code>，即可浏览生成的hexo页面。</p><h2 id="部署到GitHub"><a href="#部署到GitHub" class="headerlink" title="部署到GitHub"></a>部署到GitHub</h2><h3 id="1-创建GitHub仓库"><a href="#1-创建GitHub仓库" class="headerlink" title="1. 创建GitHub仓库"></a>1. 创建GitHub仓库</h3><p>登录GitHub，点击右上角加号 - New repository，填写Repository name，点击Create repository。注意，如果想要部署到<code>username.github.io</code>，那么Repository name必须是username.github.io，username是你的GitHub用户名。不然就会部署到<code>username.github.io/Repository name</code>。<br><img src="/images/GitHub%E5%88%9B%E5%BB%BA%E4%BB%93%E5%BA%93.png" alt="GitHub创建仓库"></p><p>在新建的仓库中找到Settings - Pages，在Branch选择master，点击Save。<br><img src="/images/GitHub%E8%AE%BE%E7%BD%AEPages.png" alt="GitHub设置Pages"></p><h3 id="2-安装插件并部署到GitHub"><a href="#2-安装插件并部署到GitHub" class="headerlink" title="2. 安装插件并部署到GitHub"></a>2. 安装插件并部署到GitHub</h3><p>在hexo站点根目录下安装hexo-deployer-git插件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install hexo-deployer-git --save<br></code></pre></td></tr></table></figure><p>修改站点根目录下的_config.yml文件，找到deploy部分，修改为如下内容：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>  <span class="hljs-attr">repo:</span> <span class="hljs-string">https://github.com/xxx/xxx.github.io.git</span><br>  <span class="hljs-attr">branch:</span> <span class="hljs-string">master</span><br></code></pre></td></tr></table></figure><p>其中repo填写自己的GitHub仓库地址，branch填写master。</p><p>不出意外的话，现在就可以在<code>xxx.github.io</code>访问到自己的博客了，至此，Hexo的搭建与部署就完成了。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>Blog</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
