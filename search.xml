<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>来装一台软路由</title>
      <link href="/2024/03/11/Build-a-Software-Router/"/>
      <url>/2024/03/11/Build-a-Software-Router/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>之前使用的小米BE7000路由器，最近觉得他的IPV6有些许卡顿，同时想升级一下40G内网，12口的SX6036又觉得有些大且用不上12口，所以决定自己装一台软路由，折腾一下。</p><h2 id="硬件选择"><a href="#硬件选择" class="headerlink" title="硬件选择"></a>硬件选择</h2><p>在硬件选择之前，先明确一下需求：</p><ol><li>高速40G内网，双口即够用</li><li>正常使用的2.5G内网，5口或者更多</li><li>较低功耗</li><li>需要一颗核显来跑一些游戏模拟器之类的（我们粥批是这样的）</li></ol><h3 id="机箱"><a href="#机箱" class="headerlink" title="机箱"></a>机箱</h3><p>这样的需求下，我决定先选择机箱。我们需要一块HPE 544+的Mellanox网卡，所以需要一个全高插槽，主板至少要自带一个2.5G网口，这样只需要再买一张4口的2.5G网卡即可，diewu家有一张半高的。在一番搜寻下，在一个手工作坊的小店里找到了一个符合我奇怪需求的<a href="https://item.taobao.com/item.htm?id=628158610335">神奇机箱</a>，非常工业风，能通过延长线插一个全高和一个半高的PCI-E卡，直接拿下。<br><img src="/images/soft-router/case.jpg" alt="神奇机箱"></p><h3 id="主板"><a href="#主板" class="headerlink" title="主板"></a>主板</h3><p>由于有核显需求，只能选择Intel的平台（预算问题没考虑上AMD的Zen4或APU），所以要在H610&#x2F;B660&#x2F;B760平台中选择一块ITX的，带至少一个2.5G网口的主板。还是因为预算问题，最终在精粤和尔英这两家中做选择（我也想买御三家的，奈何没钱啊）。精粤多一个1G网口，但贵200，so，尔英赢了。注意，尔英的B760i有两个版本，一个是啥都没标的，一个是标ARGB的。虽然我这次用不到ARGB，但是前一个版本的散热盔甲设计有问题，会遮挡绝大多数的CPU散热器，且有南桥散热器会顶弯M.2硬盘的问题，所以还是选择了贵40的ARGB版本。<br><img src="/images/soft-router/mainboard.jpg" alt="尔英主板"></p><h3 id="CPU"><a href="#CPU" class="headerlink" title="CPU"></a>CPU</h3><p>在预算与功耗的限制下，CPU貌似没得选，只能i3-12100了。至于为什么不选带T的低功耗版，因为我们粥批是这样的。</p><h3 id="电源"><a href="#电源" class="headerlink" title="电源"></a>电源</h3><p>这种体积的机箱，只能用DC-ATX电源。而且针对软路由这种24小时开机的设备，DC-ATX电源的转换率也相对较高一些。选了个160W的，稍微留了些余量，应该够用。<br><img src="/images/soft-router/powersupply.jpg" alt="DC-ATX电源"></p><h3 id="散热器"><a href="#散热器" class="headerlink" title="散热器"></a>散热器</h3><p>这个机箱的散热器只能用低一点的下压式散热器，一开始选择了ID-COOLING IS-40X，安装的时候发现47mm的太高了，会挡住全高的那张网卡，后来换成了利民的AXP90-X36，这个高度是36mm，但也会卡住一点点网卡，不过还是能用。</p><h3 id="网卡"><a href="#网卡" class="headerlink" title="网卡"></a>网卡</h3><p>40G内网需要双口，所以选择了HPE 544+，这卡由于是HPE的特殊接口的卡，所以巨便宜，算上转接板60块钱。这张卡支持RDMA，而且是ROCEv2，用在软路由上做软桥接也能正确配置，所以性价比非常高。<br><img src="/images/soft-router/hpe544.jpg" alt="HPE 544+"></p><p>2.5G网卡选择了diewu的4口2.5G网卡，8125芯片的，249块钱，这个不便宜，但他家的带一块巨大散热片，对稳定性有一定的保障。<br><img src="/images/soft-router/diewu4port.jpg" alt="diewu 4口2.5G"></p><p>大件（奇葩件）基本都确定了，浅列一下配置单：</p><table><thead><tr><th>配件</th><th>型号</th><th>到手价格</th></tr></thead><tbody><tr><td>CPU</td><td>i3-12100</td><td>599</td></tr><tr><td>主板</td><td>尔英B760i-ARGB</td><td>449</td></tr><tr><td>内存</td><td>光威天策3200C18 16G*2</td><td>364</td></tr><tr><td>硬盘</td><td>铠侠RC20 1T</td><td>抽屉里翻出来的</td></tr><tr><td>电源</td><td>DC-ATX 160W</td><td>95</td></tr><tr><td>机箱</td><td>神奇机箱</td><td>109</td></tr><tr><td>散热器</td><td>利民AXP90-X36</td><td>99</td></tr><tr><td>网卡1</td><td>HPE 544+</td><td>60</td></tr><tr><td>网卡2</td><td>diewu 4口2.5G</td><td>249</td></tr><tr><td>合计</td><td></td><td>2024</td></tr></tbody></table><p>总价居然和年份一样，这个价格还是贵了点，但如果选择前几代平台，可能会便宜一些，但功耗会高一些，所以还是选择了12100。</p><p><img src="/images/soft-router/hardware.jpg" alt="硬件进箱"></p><h2 id="软件系统"><a href="#软件系统" class="headerlink" title="软件系统"></a>软件系统</h2><p>因为我是粥批，所以选择了Windows Server 2022做宿主机系统，这样我可以直接用Winserver安装安卓模拟器来挂明日方舟，可以充分利用到核显（关于在Windows Server 2022上安装安卓模拟器的教程，可以参考我之前的文章<a href="/2024/03/01/winserver-android-hyperv/">在Windows Server 2022上安装安卓模拟器</a>）。然后用Hyper-V安装了iStoreOS作为软路由系统，并将所有网口都直通给iStoreOS（这里有坑）。</p><h3 id="网卡直通"><a href="#网卡直通" class="headerlink" title="网卡直通"></a>网卡直通</h3><p>利用这个<a href="https://github.com/chanket/DDA">工具</a>，可以在图形化界面上直通网卡给虚拟机，但由于这个工具并非官方工具，存在一些bug（也可能是微软DDA的bug），所以还是需要知道一下PowerShell的命令，以便在出现问题时能够手动操作。先到设备管理器中找到需要直通的网卡，右键属性，详细信息，找到“位置路径”这一项，复制那个PCIROOT开头的路径，这是你的网卡的位置路径。<br><img src="/images/soft-router/dda-path.jpg" alt="位置路径"><br>然后打开PowerShell，输入以下命令：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-variable">$a</span>=<span class="hljs-string">&quot;PCIROOT(x)#PCI(xxx)#PCI(xxx)&quot;</span> <span class="hljs-comment">#这里替换成你的位置路径</span><br><span class="hljs-built_in">Dismount-VMHostAssignableDevice</span> <span class="hljs-literal">-Force</span> <span class="hljs-literal">-LocationPath</span> <span class="hljs-variable">$a</span><br><span class="hljs-comment"># 这里可能会报错，说需要禁用网卡，那就禁用网卡，然后再执行上面的命令</span><br><span class="hljs-built_in">Add-VMAssignableDevice</span> <span class="hljs-literal">-LocationPath</span> <span class="hljs-variable">$a</span> <span class="hljs-literal">-VMName</span> iStoreOS<br><span class="hljs-comment"># iStoreOS是我的软路由虚拟机的名字，这里替换成你的虚拟机的名字</span><br></code></pre></td></tr></table></figure><p>这样理论上就已经将网卡直通给虚拟机了，但是在我的环境下，两张网卡各有各的坑。都是发生在当虚拟机开机的情况下，直接断电或者关闭宿主机，再次开机后，虚拟机无法启动，两张网卡都会报错。首先需要执行以下操作：</p><ol><li>打开Hyper-V管理器，找到虚拟机，右键设置，自动停止操作，选择“强制关闭虚拟机”。默认选择的是“保存虚拟机状态”，这样直通了网卡的虚拟机会去锁定网卡，导致宿主机无法使用网卡，而下一次开机时，锁定的网卡无法被虚拟机使用，循环上了。</li><li>打开powershell，把之前已经直通了的网卡取消直通，输入以下命令：</li></ol><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">Remove-VMAssignableDevice</span> <span class="hljs-literal">-LocationPath</span> <span class="hljs-variable">$a</span> <span class="hljs-literal">-VMName</span> iStoreOS<br><span class="hljs-built_in">Mount-VMHostAssignableDevice</span> <span class="hljs-literal">-LocationPath</span> <span class="hljs-variable">$a</span><br></code></pre></td></tr></table></figure><ol start="3"><li>重启宿主机，再次直通网卡给虚拟机，这样理论上虚拟机就能正常启动了。但在我的环境下，步骤2就会报错，而且两张网卡的报错不一样。</li></ol><h4 id="HPE-544"><a href="#HPE-544" class="headerlink" title="HPE 544+"></a>HPE 544+</h4><p>这个卡会提示<code>在设备卸除期间，无法加载必需的虚拟化驱动程序pcip.sys</code>，这个问题我猜测是因为直通了网卡，关机保存状态时锁定了注册表中的某一项，导致下次设备卸除的时候，找不到pcip.sys这个驱动，所以无法加载。</p><p>解决方法：</p><ol><li>在设备管理器中找到这个网卡，右键属性，详细信息，找到“硬件ID”这一项，复制那个<code>PCI\VEN_xxxx&amp;DEV_xxxx</code>这个ID。</li><li>打开注册表，找到<code>\HKEY_LOCAL_MACHINE\SYSTEM\ControlSet001\Enum\PCIP\PCI\VEN_xxxx&amp;DEV_xxxx</code>这个路径，下面应该有你直通的网卡，我们需要全部删除，重新直通，让系统重新生成这些注册表项。</li><li>在删除时，可能会提示权限不足，这是因为注册表项被锁定了，需要一层一层的解锁，非常麻烦，之后如果再次出现这个问题，我会尝试使用写一个Python脚本来解决这个问题。</li><li>删除完注册表项后，重启宿主机，再次直通网卡给虚拟机，这样理论上虚拟机就能正常启动了。</li></ol><h4 id="Realtek-8125"><a href="#Realtek-8125" class="headerlink" title="Realtek 8125"></a>Realtek 8125</h4><p>这个卡会提示“无法找到PCI路径”之类的错误，我本以为是和HPE 544+一样的问题，在操作过之后也能解决。但在配置完“强制关闭虚拟机”后，再次开机，这个错误又出现了。然而如果只直通HPE 544+，不直通Realtek 8125，这个错误就不会出现。所以和HPE 544+的问题不一样。在一顿尝试之后，我发现只要在直通之前，把Realtek 8125的所有关于“wol唤醒”和“节能”之类的功能都关闭，这个错误就不会出现。</p><ol><li>打开设备管理器，找到Realtek 8125，右键属性，高级，找到“关机唤醒”，选择“关闭”；找到“环保节能”，选择“关闭”；找到“节能以太网路”，选择“关闭”。</li><li>点开“电源管理”，取消勾选“允许计算机关闭此设备以节约电源”，“允许此设备唤醒计算机”。</li><li>重启宿主机，再次直通网卡给虚拟机，这样在意外断电或者强制关闭虚拟机后，再次开机，这个错误就不会出现了。</li></ol><p><img src="/images/soft-router/rtl8125.jpg" alt="Realtek 8125设置"></p><h3 id="软路由系统"><a href="#软路由系统" class="headerlink" title="软路由系统"></a>软路由系统</h3><p>原本是想选择爱快的，想着爱快可能稳定一些，也可能会对大墙内的网络环境有些特殊优化，但在测试之后发现，爱快的局域网网口无法开启巨帧，没法把MTU改成9000，这样40G的网卡就没法发挥出最大的性能，在测速时，40G网卡的速度只有5Gbps左右（主要是Mellanox的ConnectX-3 Pro网卡自身卸载能力也有一定问题，卡也比较老了性能比较差，只能靠打开巨帧来提高性能）；而且爱快的IPV6在我的环境下也有一些问题，MSS钳制时常会失效，时不时的会出现网页无法打开的情况，所以最终还是选择了iStoreOS。</p><p>iStoreOS是一个基于OpenWRT的软路由系统，作者是Koolshare的一位大佬，这个系统的特点是插件丰富，想要的功能基本都有，而且基于OpenWRT的系统，自己也能动手编译一些插件，这样就能满足一些特殊的需求；之后如果有网卡升级的需求，自己也能动手编译内核模块，这样就能支持新的网卡。关于iStoreOS的安装，互联网上有很多教程，这里就不再赘述了。在iStoreOS上打开40G网口的巨帧后，测速能达到25Gbps左右，虽然还是没达标（猜测可能和测速端CPU有关，毕竟我这边的CPU是i3-12100），但已经比爱快好很多了，之后会测试一下两台WinServer2022之间打开RDMA之后的速度。</p><p>在iStoreOS上关于IPV6的PMTU问题，我也找到了<a href="https://www.right.com.cn/forum/thread-8347557-1-1.html">解决方法</a>，在防火墙中添加一条规则：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">iptables -t mangle -A POSTROUTING -p tcp --tcp-flags SYN,RST SYN -o pppoe-wan -j TCPMSS --clamp-mss-to-pmtu<br>ip6tables -t mangle -A POSTROUTING -p tcp --tcp-flags SYN,RST SYN -o pppoe-wan -j TCPMSS --clamp-mss-to-pmtu<br></code></pre></td></tr></table></figure><p>这两句防火墙规则是将具有SYN标志位设置（且不设置RST标志位）的TCP数据包，通过pppoe-wan接口发送时，自动调整MSS值，使之不大于路径MTU（PMTU），从而避免由于MTU限制导致的IP分片。这样就能解决PMTU的问题了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 软路由 </tag>
            
            <tag> 装机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决开启Passwall2后向日葵无法正常远程的问题</title>
      <link href="/2024/03/11/passwall2-sunlogin/"/>
      <url>/2024/03/11/passwall2-sunlogin/</url>
      
        <content type="html"><![CDATA[<p><b>2024-03-12 更新</b></p><p>将Passwall2更新到了1.26-1版本，现在不再需要下文步骤了，把节点类型改为Sing-Box即可。</p><p><img src="/images/singbox.jpg" alt="节点类型"></p><hr><p>最近在软路由上配置了Passwall2，发现向日葵无法正常远程，会弹出“未知远程设备”的提示。就算把<code>oray.net</code>和<code>oray.com</code>加入了直连规则，也无法解决问题。找到了一个相同问题的<a href="https://github.com/xiaorouji/openwrt-passwall2/issues/447">issue</a>，在高级设置中勾选“流量嗅探只供路由使用 (Xray)”即可。</p><p><img src="/images/passwall2-sunlogin-xrayconfig.png" alt="流量嗅探只供路由使用"></p><p>这个选项不勾选时，你会向VPS发送域名准备访问，经过两次转换，但VPS的DNS得到的目标IP更准更近，但向日葵的海外业务是需要开通向日葵全球会员的，所以会出现“未知远程设备”的提示。勾选后，在软路由上进行DNS解析，随后判断出是大陆IP，直接连接，不再向VPS发送域名请求。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 软路由 </tag>
            
            <tag> Passwall2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在Windows Server 2022上安装Android模拟器</title>
      <link href="/2024/03/01/winserver-android-hyperv/"/>
      <url>/2024/03/01/winserver-android-hyperv/</url>
      
        <content type="html"><![CDATA[<p>由于需要在Windows Server 2022上挂一些游戏（我们粥批是这样的），需要安装一个Android模拟器。由于Hyper-V的存在，市面上主流的模拟器都会报错，有报缺少VT-D的，有直接说无法启动的，也有让我关闭Hyper-V的。但是我又需要Hyper-V来跑一些虚拟机，所以不能关闭。</p><p>其实在Windows10上，hyper-v和模拟器是可以共存的，需要去功能中添加一个叫做“Windows Hypervisor Platform(Windows虚拟机监控程序平台)”的功能，就可以让安卓模拟器、以及VMware等虚拟机软件和Hyper-V共存。但是在Windows Server 2022上，在功能中找不到这个功能，需要使用PowerShell来安装。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs powershell">Dism /online /<span class="hljs-built_in">Enable-Feature</span> /FeatureName:HypervisorPlatform /All <span class="hljs-comment"># 安装Windows Hypervisor Platform</span><br><span class="hljs-comment"># 同时安装VirtualMachinePlatform与WSL 一次性重启解决</span><br>Dism /online /<span class="hljs-built_in">Enable-Feature</span> /FeatureName:VirtualMachinePlatform /All<br>Dism /online /<span class="hljs-built_in">Enable-Feature</span> /FeatureName:Microsoft<span class="hljs-literal">-Windows-Subsystem-Linux</span> /All<br></code></pre></td></tr></table></figure><p>随后重启，就可以在Windows Server 2022上安装Android模拟器了。我选择了传说中最流畅的<a href="https://mumu.163.com/">MuMu模拟器</a>，下载后一路下一步安装即可，过程中并没有报错，问题解决。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Windows </tag>
            
            <tag> Android </tag>
            
            <tag> Hyper-V </tag>
            
            <tag> 明日方舟 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>排查Mellanox ConnectX-3 Pro 在Windows下无法启动RDMA的问题</title>
      <link href="/2024/02/29/mellanox-win-rocev2/"/>
      <url>/2024/02/29/mellanox-win-rocev2/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>最近在安装了Mellanox ConnectX-3 Pro的网卡，想要使用RDMA来加速网络传输，但是在安装好驱动后，发现SMB无法启动RDMA。在网上找了一圈，也没有找到解决方案，最后自己摸索了一下，终于解决了这个问题，就此记录一下。</p><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>为了最简单地启用RDMA，我两端都使用了Windows系统，客户端是Windows 10 22H2，服务端是Windows Server 2022。两端都使用了Mellanox ConnectX-3 Pro 40G网卡。通过软路由连接，题外话，软路由的软交换是能够支持RDMA的，这里我使用的软路由系统是iKuai。两端配置如下：</p><p>客户端：</p><ul><li>Windows 10 22H2</li><li>Ryzen 9 7950X</li><li>Mellanox ConnectX-3 Pro 40G网卡</li></ul><p>服务端：</p><ul><li>Windows Server 2022</li><li>Xeon E5-2640 v4</li><li>Mellanox ConnectX-3 Pro 40G网卡</li></ul><h2 id="排查"><a href="#排查" class="headerlink" title="排查"></a>排查</h2><p>首先，我们需要确认网卡的驱动是否安装正确。在设备管理器中，我们可以看到Mellanox ConnectX-3 Pro网卡的驱动已经安装成功。通过<code>Get-NetAdapter</code>命令，我们可以看到网卡的详细信息，包括网卡的名字、状态、MAC地址等。通过<code>Get-NetAdapterRDMA</code>命令，我们可以看到网卡是否支持RDMA，以及RDMA是否已经启用。在我的环境中，服务端的RDMA是已经启用的，但是客户端的RDMA是没有启用的，所以需要排查客户端的问题。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">PS</span> C:\&gt;<span class="hljs-built_in">Get-NetAdapterRDMA</span><br>Name                      InterfaceDescription                     Enabled     PFC        ETS       <br><span class="hljs-literal">----</span>                      <span class="hljs-literal">--------------------</span>                     <span class="hljs-literal">-------</span>     <span class="hljs-literal">---</span>        <span class="hljs-literal">---</span><br>以太网 <span class="hljs-number">13</span>                 HP InfiniBand FDR/Ethernet <span class="hljs-number">10</span>Gb/<span class="hljs-number">40</span>Gb ...  False        False      False<br>以太网 <span class="hljs-number">14</span>                 HP InfiniBand FDR/Ethernet <span class="hljs-number">10</span>Gb/<span class="hljs-number">40</span>Gb ...  False        False      False<br><span class="hljs-built_in">PS</span> C:\&gt;<br><span class="hljs-built_in">PS</span> C:\&gt;<span class="hljs-built_in">Get-SmbServerNetworkInterface</span><br>Interface Index RSS Capable RDMA Capable Speed    IpAddresses<br><span class="hljs-literal">---------------</span> <span class="hljs-literal">-----------</span> <span class="hljs-literal">------------</span> <span class="hljs-literal">-----</span>    <span class="hljs-literal">-----------</span><br><span class="hljs-number">12</span>              True        False         <span class="hljs-number">40</span> Gbps  &#123;...&#125;<br>...<br></code></pre></td></tr></table></figure><p>通过<code>Get-MlnxDriverCoreSetting</code>命令，可以查看ConnectX-3 Pro网卡的驱动设置，包括RoCE版本、网卡的状态等。我们需要使用RoCEv2，所以需要确认RoCEv2是否已经启用。在我的环境中，客户端的RoCEv2是没有启用的，找到问题所在了。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">PS</span> C:\&gt;<span class="hljs-built_in">Get-MlnxDriverCoreSetting</span><br><br>Caption               : DriverCoreSettingData <span class="hljs-string">&#x27;mlx4_bus&#x27;</span><br>Description           : Mellanox Driver Option Settings<br>ElementName           : mlx4_bus<br>InstanceID            : mlx4_bus<br>Name                  : mlx4_bus<br>Source                : <span class="hljs-number">3</span><br>SystemName            : DESKTOP<span class="hljs-literal">-ONVNK2T</span><br>LogMttsPerSeg         : <span class="hljs-number">0</span><br>LogNumCq              : <span class="hljs-number">19</span><br>LogNumMac             : <span class="hljs-number">7</span><br>LogNumMcg             : <span class="hljs-number">4294967295</span><br>LogNumMpt             : <span class="hljs-number">19</span><br>LogNumMtt             : <span class="hljs-number">20</span><br>LogNumQp              : <span class="hljs-number">20</span><br>LogNumRdmaRc          : <span class="hljs-number">4</span><br>LogNumSrq             : <span class="hljs-number">16</span><br>LogNumVlan            : <span class="hljs-number">7</span><br>MaximumWorkingThreads : <span class="hljs-number">4294967295</span><br>RoceMode              : <span class="hljs-number">0</span><br>Set4kMtu              : True<br>SriovPort1NumVFs      :<br>SriovPort2NumVFs      :<br>SriovPortMode         :<br>PSComputerName        :<br></code></pre></td></tr></table></figure><p>可以看到，RoceMode是0，说明RoCE是没有启用的，我们需要将RoCEv2启用。通过<code>Set-MlnxDriverCoreSetting</code>命令，我们可以修改RoCEv2的设置。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">PS</span> C:\&gt;<span class="hljs-built_in">Set-MlnxDriverCoreSetting</span> <span class="hljs-literal">-RoceMode</span> <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>修改成功后，我们需要重启网卡，使设置生效。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">PS</span> C:\&gt;<span class="hljs-built_in">Restart-NetAdapter</span> <span class="hljs-literal">-Name</span> <span class="hljs-string">&quot;以太网 13&quot;</span><br></code></pre></td></tr></table></figure><p>重启成功后，我们再次查看RDMA的状态，可以看到RDMA已经启用了。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">PS</span> C:\&gt;<span class="hljs-built_in">Get-NetAdapterRDMA</span><br>Name                      InterfaceDescription                     Enabled     PFC        ETS<br><span class="hljs-literal">----</span>                      <span class="hljs-literal">--------------------</span>                     <span class="hljs-literal">-------</span>     <span class="hljs-literal">---</span>        <span class="hljs-literal">---</span><br>以太网 <span class="hljs-number">13</span>                 HP InfiniBand FDR/Ethernet <span class="hljs-number">10</span>Gb/<span class="hljs-number">40</span>Gb ...  True        False      False<br>以太网 <span class="hljs-number">14</span>                 HP InfiniBand FDR/Ethernet <span class="hljs-number">10</span>Gb/<span class="hljs-number">40</span>Gb ...  True       False      False<br></code></pre></td></tr></table></figure><p>检查SMB的RDMA状态，可以看到客户端SMB的RDMA也已经启用了。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">PS</span> C:\&gt;<span class="hljs-built_in">Get-SmbClientNetworkInterface</span><br>Interface Index RSS Capable RDMA Capable Speed    IpAddresses<br><span class="hljs-literal">---------------</span> <span class="hljs-literal">-----------</span> <span class="hljs-literal">------------</span> <span class="hljs-literal">-----</span>    <span class="hljs-literal">-----------</span><br><span class="hljs-number">12</span>              True        True         <span class="hljs-number">40</span> Gbps  &#123;...&#125;<br>...<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Windows </tag>
            
            <tag> Mellanox </tag>
            
            <tag> RDMA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记录一次光猫崩溃</title>
      <link href="/2024/02/29/zte-modem-crash/"/>
      <url>/2024/02/29/zte-modem-crash/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>2024年2月27日，上海电信对中兴光猫G7615进行推送升级，版本变为V2.0.0P2T3。笔者是自己购买的光猫，不是电信给的，所有参数都是自己设置的，无法通过电信自动下发。在自动更新后，疑似是电信自动下发的配置文件导致光猫崩溃，先是IPTV无法使用，在光猫重启后，无法上网。同时光猫的管理员密码被电信的TR069协议修改，通过Web页面只能登陆普通用户，没有管理员权限，无法配置参数。联系运维小哥，被告知只能换回SDN光猫，无法桥接，无法使用自己的路由器来拨号。遂折腾了一天，重新配置，终于恢复如初，就此记录一下折腾的过程。<br><img src="/images/zte-modem/autoupdate.png" alt="光猫被自动升级了"></p><h2 id="重置光猫"><a href="#重置光猫" class="headerlink" title="重置光猫"></a>重置光猫</h2><p class="note note-danger" style="font-weight: bold;  font-size: 18px;">先拔掉光纤！先拔掉光纤！先拔掉光纤！</p><!-- # **<span style="color:red;">先拔掉光纤！先拔掉光纤！先拔掉光纤！</span>** --><p>重要的事情说三遍！如果不拔掉光纤，光猫会自动通过电信的TR069协议改管理员密码。进不了光猫后台就什么都干不了！</p><ol><li>拔掉光纤，用卡针长按光猫背面的Reset键15-30秒，等待光猫的所有指示灯都亮起，然后松开Reset键。</li><li>用一根网线连接光猫和电脑，由于光猫重置后，DHCP服务不一定会开启，所以需要手动设置电脑的IP地址为<code>192.168.1.2</code>，使用浏览器访问<code>192.168.1.1</code>，输入用户名<code>telecomadmin</code>和密码<code>nE7jA%5m</code>，进入光猫的管理页面。</li><li>需要折腾的话，还需要打开光猫的telnet，但经过实测，V2.0.0P2T3版本的光猫已经无法通过开源工具解锁telnet，所以我们需要先降级光猫的固件。这里我使用的是恩山找到的<code>V2.0.0P1N15E</code>版本的相对较老的固件，原帖子在<a href="https://www.right.com.cn/forum/thread-8310054-1-2.html">这里</a>，在我的仓库也可以<a href="https://github.com/FrankGu0911/zte_modem_tools/blob/main/firmware/G7615_CT_V2.0.0P1N15E_20230812_UPGRADE_BOOTLDR_ALL.bin">下载</a>，保证可以解锁telnet。（降级一定要确定硬件版本，选择合适自己得版本降级）</li></ol><p class="note note-danger" style="font-weight: bold;  font-size: 18px;">!!注意，只适用于G7615电信原版，联通版等手动刷了电信分区的机器切勿尝试，会砖，会砖，会砖!!</p><ol start="4"><li>寻找一番发现，光猫的固件升级页面是隐藏的，需要在地址栏输入<code>http://192.168.1.1:8080/login.cgi?username=telecomadmin&amp;psd=nE7jA%255m&amp;hidden=upgrade</code>，然后点击管理-&gt;设备管理-&gt;软件版本升级，上传bin升级。</li><li>降级成功后，自动重启，重新登录管理页面，此时硬件版本显示：V1.3.0 软件版本：V2.0.0P1T1下面就开始开启telnet来折腾。</li></ol><h2 id="开启telnet"><a href="#开启telnet" class="headerlink" title="开启telnet"></a>开启telnet</h2><p>老版本的固件可以通过两款开源工具来解锁telnet：</p><ol><li>来自<a href="https://www.right.com.cn/forum/space-uid-273987.html">mayi5147</a>：<a href="https://github.com/douniwan5788/zte_modem_tools">https://github.com/douniwan5788/zte_modem_tools</a></li><li>来自<a href="https://www.right.com.cn/forum/space-uid-294565.html">thank243</a>：<a href="https://github.com/thank243/zteOnu">https://github.com/thank243/zteOnu</a></li></ol><p>这里我使用的是第一款工具，需要Python3环境，按照README的说明，先安装依赖：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">conda create -n zte python=3.8<br>conda activate zte<br>pip install -r requirements.txt<br></code></pre></td></tr></table></figure><p>我使用的是电信版固件，默认管理员用户名与密码是<code>telecomadmin</code>和<code>nE7jA%5m</code>，所以运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python3 zte_factroymode.py --user telecomadmin --pass nE7jA%5m --ip 192.168.1.1 --port 8080 telnet open<br></code></pre></td></tr></table></figure><p><img src="/images/zte-modem/zte-telnetopen.png" alt="使用开源工具解锁Telnet"></p><p>运行成功后，光猫的telnet就被打开了，同时会给一个telnet的用户名和密码，记得赶紧操作，十几分钟半个小时后，用户名和密码就会换。</p><p>Windows下可以使用putty连接telnet，或者在系统功能中安装Telnet，安装过程不再赘述。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">telnet 192.168.1.1<br></code></pre></td></tr></table></figure><p><img src="/images/zte-modem/telnet-con.png" alt="Telnet登陆"></p><h2 id="固化Telnet"><a href="#固化Telnet" class="headerlink" title="固化Telnet"></a>固化Telnet</h2><p>光猫重启后，telnet就会被关闭，所以我们需要固化telnet：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash">sendcmd 1 DB p TelnetCfg    <span class="hljs-comment">#查看telnet配置</span><br>sendcmd 1 DB <span class="hljs-built_in">set</span> TelnetCfg 0 Lan_Enable 1   <span class="hljs-comment">#开启lan口telnet</span><br>sendcmd 1 DB <span class="hljs-built_in">set</span> TelnetCfg 0 TS_UName root    <span class="hljs-comment">#设置telnet用户名</span><br>sendcmd 1 DB <span class="hljs-built_in">set</span> TelnetCfg 0 TSLan_UName root    <span class="hljs-comment">#设置lan口下telnet用户名</span><br>sendcmd 1 DB <span class="hljs-built_in">set</span> TelnetCfg 0 TS_UPwd Zte521   <span class="hljs-comment">#设置telnet密码</span><br>sendcmd 1 DB <span class="hljs-built_in">set</span> TelnetCfg 0 TSLan_UPwd Zte521   <span class="hljs-comment">#设置lan口下telnet密码</span><br>sendcmd 1 DB <span class="hljs-built_in">set</span> TelnetCfg 0 Max_Con_Num 99   <span class="hljs-comment">#设置最大连接数</span><br>sendcmd 1 DB <span class="hljs-built_in">set</span> TelnetCfg 0 ExitTime 999999    <span class="hljs-comment">#设置退出时间</span><br>sendcmd 1 DB <span class="hljs-built_in">set</span> TelnetCfg 0 InitSecLvl 3   <span class="hljs-comment">#设置初始安全级别</span><br>sendcmd 1 DB <span class="hljs-built_in">set</span> TelnetCfg 0 CloseServerTime 9999999    <span class="hljs-comment">#设置关闭telnet时间</span><br>sendcmd 1 DB <span class="hljs-built_in">set</span> TelnetCfg 0 Lan_EnableAfterOlt 1   <span class="hljs-comment">#设置olt下lan口telnet开关</span><br>sendcmd 1 DB save   <span class="hljs-comment">#保存配置</span><br></code></pre></td></tr></table></figure><h2 id="删除万恶的TR069"><a href="#删除万恶的TR069" class="headerlink" title="删除万恶的TR069"></a>删除万恶的TR069</h2><p>一旦光猫连上光纤，电信就会通过TR069协议修改光猫的管理员密码，所以我们需要删除TR069：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">sendcmd 1 DB p MgtServer   <span class="hljs-comment">#查看MgtServer配置</span><br>sendcmd 1 DB <span class="hljs-built_in">set</span> MgtServer 0 URL http://127.0.0.1   <span class="hljs-comment">#将TR069服务器地址改为本地</span><br>sendcmd 1 DB <span class="hljs-built_in">set</span> MgtServer 0 Tr069Enable 0  <span class="hljs-comment">#关闭TR069</span><br>sendcmd 1 DB save<br></code></pre></td></tr></table></figure><p>同时，如果不用电话，建议直接删除管理+语音连接</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">sendcmd 1 DB p WANC<br>sendcmd 1 DB delr WANC 0<br>sendcmd 1 DB save<br></code></pre></td></tr></table></figure><p>通过以上步骤，得到一个已注册但没有配置任何连接的光猫。再更改下管理员用户名和密码。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">sendcmd 1 DB <span class="hljs-built_in">set</span> DevAuthInfo 0 User XXXXXX  <span class="hljs-comment">#修改超级用户名</span><br>sendcmd 1 DB <span class="hljs-built_in">set</span> DevAuthInfo 0 Pass XXXXXX  <span class="hljs-comment">#修改超级密码</span><br>sendcmd 1 DB save<br></code></pre></td></tr></table></figure><h2 id="解决DNS劫持"><a href="#解决DNS劫持" class="headerlink" title="解决DNS劫持"></a>解决DNS劫持</h2><p>电信固件和联通固件部分省份没注册ITMS服务器的话会劫持所有DNS请求的结果到192.168.1.1，使用如下命令手动欺骗ITMS注册结果，解决刷完后打开任意网页自动跳转LOID注册页面。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">sendcmd 1 DB <span class="hljs-built_in">set</span> PDTCTUSERINFO 0 Status 0<br>sendcmd 1 DB <span class="hljs-built_in">set</span> PDTCTUSERINFO 0 Result 1<br>sendcmd 1 DB save<br></code></pre></td></tr></table></figure><p>重启光猫后，就可以使用新的管理员用户名和密码登录光猫的管理页面了。</p><h2 id="上海电信光猫配置"><a href="#上海电信光猫配置" class="headerlink" title="上海电信光猫配置"></a>上海电信光猫配置</h2><p>先去管理中填入Loid，笔者这里是需要桥接网络，并且IPTV仍然接在光猫上，配置网络：</p><p><img src="/images/zte-modem/network.png" alt="网络设置"></p><p>然后是IPTV：</p><p><img src="/images/zte-modem/iptv.png" alt="IPTV设置"><br><img src="/images/zte-modem/vlan-iptv.png" alt="IPTV的Vlan设置"><br><img src="/images/zte-modem/lan.png" alt="别动DNS来源"></p><p>看直播频道会卡住的话，需要配置一下组播IGMP：</p><p><img src="/images/zte-modem/igmp.png" alt="组播IGMP设置"></p><p>至此，光猫的配置就完成了，可以拔掉网线，接上光纤，连接路由器，就可以正常上网，看IPTV了。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>目前电信的光猫固件版本是V2.0.0P2T3，已经无法通过开源工具解锁telnet，所以只能通过降级固件来解锁telnet。还好没有堵上光猫固件降级的隐藏开关，不然可能要拆机用TTL刷机了。在此感谢恩山的大佬们，感谢开源工具的作者们，在此记录一下折腾的过程，以备后用（希望不会用到），希望对大家有所帮助。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 网络 </tag>
            
            <tag> 光猫 </tag>
            
            <tag> 电信 </tag>
            
            <tag> TR069 </tag>
            
            <tag> Telnet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记录一次Hexo的搭建与部署</title>
      <link href="/2024/02/28/Hexo-build/"/>
      <url>/2024/02/28/Hexo-build/</url>
      
        <content type="html"><![CDATA[<p>本教程使用GitHub自带的GitHub pages来生成静态个人博客，而Hexo可以更换各种好看的主题，而且都是免费的，花一点时间就可以打造出自己独有的个人博客。</p><p>Hexo这个有力的工具可以让我们专注于写出一篇博客而不需要关心如何编写html和CSS，再如何形成一个网站，它可以根据markdown文档和指定的主题直接生成一个静态网站，对于新手朋友或者不是专门搞前端开发的人们非常友好。</p><p>还有一个优点就是GitHub pages生成的网站很稳定，就算自己的本地站点被删除，也完全不影响已经发布到GitHub仓库的文章，依旧可以访问查看。</p><h2 id="部署环境"><a href="#部署环境" class="headerlink" title="部署环境"></a>部署环境</h2><h3 id="1-安装git和node-js"><a href="#1-安装git和node-js" class="headerlink" title="1. 安装git和node.js"></a>1. 安装git和node.js</h3><p>首先我们需要在本地安装git和node.js，因为Hexo基于node.js，再生成一个ssh密钥用于连接GitHub仓库以及本地文件夹。</p><ul><li>git下载链接：<a href="https://git-scm.com/">Git - Downloading Package</a></li><li>node.js下载链接：<a href="https://nodejs.org/">Node.js</a></li></ul><p>安装时可以直接一路点下一步，按默认设置安装即可。<br>想要验证安装是否成功，可以win+r输入cmd进入终端，并如下验证，如果出现版本号说明安装成功。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">git --version <span class="hljs-comment"># 查看git版本</span><br>node -v <span class="hljs-comment"># 查看node版本</span><br>npm -v <span class="hljs-comment"># 查看npm版本</span><br></code></pre></td></tr></table></figure><h3 id="2-连接GitHub"><a href="#2-连接GitHub" class="headerlink" title="2. 连接GitHub"></a>2. 连接GitHub</h3><p>在本地终端输入以下命令，设置用户名和邮箱：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config --global user.name <span class="hljs-string">&quot;GitHub用户名&quot;</span><br>git config --global user.email <span class="hljs-string">&quot;GitHub邮箱&quot;</span><br></code></pre></td></tr></table></figure><p>然后创建一个ssh密钥：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh-keygen -t rsa -C <span class="hljs-string">&quot;GitHub邮箱&quot;</span><br></code></pre></td></tr></table></figure><p>最后返回密钥结果和图片说明创建完成。</p><pre><code class="hljs">Enter passphrase (empty for no passphrase):Enter same passphrase again:Your identification has been saved in C:\xxx\xxx/.ssh/id_rsa.    Your public key has been saved in C:\xxx\xxx/.ssh/id_rsa.pub.    The key fingerprint is:SHA256:xxxThe key&#39;s randomart image is:+---[RSA 3072]----+|       +=+=+.++oo||       .oB  +.+=o||      . o .. +.oo||     o .    = oo.||      o S  + = =+||         +o + O o||          .+ + . ||          . . +  ||           . . .E|+----[SHA256]-----+</code></pre><p>找到路径Your public key has been saved in C:\xxx\xxx&#x2F;.ssh&#x2F;id_rsa.pub，打开id_rsa.pub文件，复制里面的内容。</p><p>登录GitHub，点击右上角自己的头像 - setting，找到SSH and GPG keys，点击New SSH key：<br><img src="/images/GitHub%E6%B7%BB%E5%8A%A0sshkey.png" alt="GitHub添加ssh key"><br>检测是否连接成功：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh git@github.com<br></code></pre></td></tr></table></figure><p>如果出现以下信息说明连接成功：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">Hi xxx! You<span class="hljs-string">&#x27;ve successfully authenticated,...</span><br></code></pre></td></tr></table></figure><h2 id="Hexo搭建"><a href="#Hexo搭建" class="headerlink" title="Hexo搭建"></a>Hexo搭建</h2><p>关于详细安装步骤，可查看Hexo官网：<a href="https://hexo.io/zh-cn/docs/">Hexo - A fast, simple &amp; powerful blog framework</a>，这里只是简单的记录一下。</p><p>使用 npm 安装 Hexo：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install -g hexo-cli<br></code></pre></td></tr></table></figure><p>输入hexo -v即可查看是否安装成功。</p><p>新建一个hexo站点根目录，在这个目录下执行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo init blog<br><span class="hljs-built_in">cd</span> blog<br>npm install<br></code></pre></td></tr></table></figure><p>完成后再执行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo g<br>hexo s<br></code></pre></td></tr></table></figure><p>访问<code>http://localhost:4000</code>，即可浏览生成的hexo页面。</p><h2 id="部署到GitHub"><a href="#部署到GitHub" class="headerlink" title="部署到GitHub"></a>部署到GitHub</h2><h3 id="1-创建GitHub仓库"><a href="#1-创建GitHub仓库" class="headerlink" title="1. 创建GitHub仓库"></a>1. 创建GitHub仓库</h3><p>登录GitHub，点击右上角加号 - New repository，填写Repository name，点击Create repository。注意，如果想要部署到<code>username.github.io</code>，那么Repository name必须是username.github.io，username是你的GitHub用户名。不然就会部署到<code>username.github.io/Repository name</code>。<br><img src="/images/GitHub%E5%88%9B%E5%BB%BA%E4%BB%93%E5%BA%93.png" alt="GitHub创建仓库"></p><p>在新建的仓库中找到Settings - Pages，在Branch选择master，点击Save。<br><img src="/images/GitHub%E8%AE%BE%E7%BD%AEPages.png" alt="GitHub设置Pages"></p><h3 id="2-安装插件并部署到GitHub"><a href="#2-安装插件并部署到GitHub" class="headerlink" title="2. 安装插件并部署到GitHub"></a>2. 安装插件并部署到GitHub</h3><p>在hexo站点根目录下安装hexo-deployer-git插件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install hexo-deployer-git --save<br></code></pre></td></tr></table></figure><p>修改站点根目录下的_config.yml文件，找到deploy部分，修改为如下内容：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>  <span class="hljs-attr">repo:</span> <span class="hljs-string">https://github.com/xxx/xxx.github.io.git</span><br>  <span class="hljs-attr">branch:</span> <span class="hljs-string">master</span><br></code></pre></td></tr></table></figure><p>其中repo填写自己的GitHub仓库地址，branch填写master。</p><p>不出意外的话，现在就可以在<code>xxx.github.io</code>访问到自己的博客了，至此，Hexo的搭建与部署就完成了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Blog </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
